package ilstu.edu;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.security.SecureRandom;
import java.util.Scanner;

public class Game {
	
	private LinkedList<Card> cards;
	private Stack<Card> faceDownCards;
	private Stack<Card> faceUpCards;
	private Queue<Player> players;
	
	public Game(String [] players) {
		this.cards = new LinkedList<Card>();
		this.faceDownCards = new Stack<Card>();
		this.faceUpCards = new Stack<Card>();
		this.players = new LinkedList<Player>();
		populateCards();
		shuffle();
		for (int i = 0; i < players.length; i++) {
			if (players[i] == null)
				break;
			this.players.add(new Player(players[i], this.faceDownCards.pop(), this.faceDownCards.pop(),this.faceDownCards.pop(),this.faceDownCards.pop()));
		}
	}
	
	private void populateCards() {
		if (cards.isEmpty() && faceUpCards.isEmpty()) {
			for (int i = 1; i < 11; i++)
				cards.add(new Card(i, 1));
			for (int i = 1; i < 11; i++)
				cards.add(new Card(i, 2));
			for (int i = 1; i < 11; i++)
				cards.add(new Card(i, 3));
			for (int i = 1; i < 11; i++)
				cards.add(new Card(i, 4));
		}
		else {
			Card temp = faceUpCards.pop();
			while (!faceUpCards.isEmpty())
				cards.add(faceUpCards.pop());
			faceUpCards.push(temp);
		}
	}
	
	private void shuffle() {
		if (cards.isEmpty())
			return;
		SecureRandom rand = new SecureRandom();
		int temp = rand.nextInt(cards.size());
		faceDownCards.push(cards.get(temp));
		cards.remove(temp);
		shuffle();
	}
	
	public void simulateGame() {
		do {
		
		} while (true);
	}
}