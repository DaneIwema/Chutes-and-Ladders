package ilstu.edu;

import java.util.LinkedList;

public class Player {

	private String name;
	private LinkedList<Integer> hand;
	
	/**
	 * Player constructor, takes a name and the four cards they are dealt and creates the players Hand with this. 
	 * @param name - player's name
	 * @param card1 - first card
	 * @param card2 - second card
	 * @param card3 - third card
	 * @param card4 - fourth card
	 */
	public Player(String name, int card1, int card2, int card3, int card4) {
		this.name = name;
		this.hand = new LinkedList<Integer>();
		addCardInOrder(card1);
		addCardInOrder(card2);
		addCardInOrder(card3);
		addCardInOrder(card4);
	}
	
	/**
	 * This method will take a card and add it to the players hand in the order of
	 * clubs, hearts, spades, and diamonds. If the card suits are the same then it
	 * will be added in order of least to greatest from the card's number.
	 * @param card - the card being added to the player's hand. 
	 */
	public void addCardInOrder(int card) {
		if (hand.isEmpty())
			hand.add(card);
		else {
			for (int i = 0; i < hand.size(); i++) {
				if (card < hand.get(i)) {
					hand.add(i, card);
					return;
				}
				else {
					hand.add(i + 1, card);
					return;
				}
			}
		}
	}

	
	/**
	 * Used to make the player's decision whether they should pull from the floor or from the face down deck. 
	 * @param floor - the face up card from the floor
	 * @return decision - boolean, true if they should pull from the floor for a win, or false if they should pull a new card.
	 */
	public boolean decideCard(Card floor) {
		if (checkWin(floor, 0, 0) != 0) {
			return true;
		}
		return false;
	}
	
	/**
	 * 
	 * @param drawFrom - boolean used to represent whether or not to 
	 * @param floor - the face up card from the floor
	 * @return
	 */
	public boolean drawCard(Card floor) {
		if (checkWin(floor) != 0) {
			System.out.println(name + " has drawn from the floor.");
			if (checkWin(floor) == 4)
				System.out.println(name + " has won with a 4 of a kind of " + floor.getSuit() + "'s!");
			else if (checkWin(floor) == 20)
				System.out.println(name + " has won by their cards adding to 20!");
			System.out.println(this);
				return true;
		}
		else {
			System.out.println(name + " drew a new card.");
			return false;
		}
	}
	
	/**
	 * This method is used to determine the most useless card to throw and returns that card.
	 * @return card - this will return a card that is removed from the players hand for the face up stack.
	 */
	public Card throwCard() {
		int [] cards = {0, 0, 0, 0};
		Node current = head;
		while (current != null) {
			if (current.card.getSuit() == 1)
				cards[0]++;
			if (current.card.getSuit() == 2)
				cards[1]++;
			if (current.card.getSuit() == 3)
				cards[2]++;
			if (current.card.getSuit() == 4)
				cards[3]++;
			current = current.next;
		}
		int greatest = 0;
		for (int i = 1; i < cards.length; i++) {
			if (cards[i])
		}
			
		Node thrownCard = head;
		while (thrownCard != null) {
			if (thrownCard.card.getSuit() )
		}
		System.out.println(name + " threw their " + thrownCard + "\n");
		return thrownCard;
	}
	
	/**
	 * This method is used to determine if there is a win condition and what that win condition is and returns the condition.
	 * @param floor - this is the top of the face up stack.
	 * @return an integer value of 0, 4, or 20. 0 if there is no win condition met,
	 * 		4 if there is a 4 of a kind for the suit, and 20 if there is a set that adds to 20.
	 */
	public int checkWin(Card floor) {
		Node current = head;
		if (head.card.getSuit() == floor.getSuit())
			
	}
	
	public String toString() {
		StringBuilder player = new StringBuilder();
		player.append(name + "'s hand: ");
		for (int i = 0; i < hand.size(); i++) {
			if (hand.get(i) % 10 == 0)
				player.append("Ace");
			else
				player.append((hand.get(i) % 10) + 1);
			if (hand.get(i) / 10 == 0)
				player.append(" of Clubs ");
			if (hand.get(i) / 10 == 1)
				player.append(" of Hearts ");
			if (hand.get(i) / 10 == 2)
				player.append(" of Spades ");
			if (hand.get(i) / 10 == 3)
				player.append(" of Diamonds ");
		}
		return player.toString();
	}
}
