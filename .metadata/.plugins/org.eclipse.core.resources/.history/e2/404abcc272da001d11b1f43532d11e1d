package ilstu.edu;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.security.SecureRandom;
import java.util.Scanner;

public class Game {
	
	private LinkedList<Integer> cards;
	private Stack<Integer> faceDownCards;
	private Stack<Integer> faceUpCards;
	private Queue<Player> players;
	
	public Game(String [] players) {
		this.cards = new LinkedList<Integer>();
		this.faceDownCards = new Stack<Integer>();
		this.faceUpCards = new Stack<Integer>();
		this.players = new LinkedList<Player>();
		populateCards();
		shuffle();
		for (int i = 0; i < players.length; i++) {
			if (players[i] == null)
				break;
			this.players.add(new Player(players[i], this.faceDownCards.pop(), this.faceDownCards.pop(),this.faceDownCards.pop(),this.faceDownCards.pop()));
		}
	}
	
	private void populateCards() {
		if (cards.isEmpty() && faceUpCards.isEmpty()) {
			for (int i = 0; i < 10; i++)
				cards.add(i);
			for (int i = 10; i < 20; i++)
				cards.add(i);
			for (int i = 20; i < 30; i++)
				cards.add(i);
			for (int i = 30; i < 40; i++)
				cards.add(i);
		}
		else {
			int temp = faceUpCards.pop();
			while (!faceUpCards.isEmpty())
				cards.add(faceUpCards.pop());
			faceUpCards.push(temp);
		}
	}
	
	private void shuffle() {
		if (cards.isEmpty())
			return;
		SecureRandom rand = new SecureRandom();
		int temp = rand.nextInt(cards.size());
		faceDownCards.push(cards.get(temp));
		cards.remove(temp);
		shuffle();
	}
	
	public void simulateGame() {
		while (players.peek().drawCard(faceDownCards.pop())){
			players.peek().throwCard();
			players.add(players.poll());
			if (faceDownCards.peek() == null) {
				populateCards();
				shuffle();
			}
			players.peek().
		}
		players.peek().drawCard(faceUpCards.pop());
	}
}